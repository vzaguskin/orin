MODEL_DIR = "models/vosk-asr"

import asyncio
import time
import sherpa_onnx
import sounddevice as sd
import os
import queue  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤ asyncio


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
_recognizer_cache = None

def create_recognizer():
    global _recognizer_cache
    if _recognizer_cache is not None:
        return _recognizer_cache

    recognizer = sherpa_onnx.OnlineRecognizer.from_transducer(
        tokens=os.path.join(MODEL_DIR, "tokens.txt"),
        encoder=os.path.join(MODEL_DIR, "vosk-ru-encoder.rknn"),
        decoder=os.path.join(MODEL_DIR, "vosk-ru-decoder.rknn"),
        joiner=os.path.join(MODEL_DIR, "vosk-ru-joiner.rknn"),
        num_threads=4,
        sample_rate=16000,
        feature_dim=80,
        enable_endpoint_detection=True,
        rule1_min_trailing_silence=1.0,
        rule2_min_trailing_silence=0.8,
        rule3_min_utterance_length=3.0,
        provider="rknn",
        model_type="zipformer",
        debug=False,
    )
    _recognizer_cache = recognizer
    return recognizer


async def listen_and_recognize_phrase(device=0, sample_rate=16000, timeout=15.0):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤ asyncio.
    """
    sync_queue = queue.Queue()  # ‚Üê –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ—á–µ—Ä–µ–¥—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
    stop_event = asyncio.Event()

    def recognition_worker():
        """–†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            recognizer = create_recognizer()
            stream = recognizer.create_stream()

            print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ... (–∂–¥—ë–º –∫–æ–Ω—Ü–∞ —Ñ—Ä–∞–∑—ã)")

            # üëá audio_callback —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ recognition_worker ‚Äî –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stream –∏ sample_rate
            def audio_callback(indata, frames, time_info, status):
                if status:
                    print(f"‚ö†Ô∏è Audio stream status: {status}")
                samples = indata[:, 0]
                stream.accept_waveform(sample_rate, samples)

            with sd.InputStream(
                device=device,
                channels=1,
                samplerate=sample_rate,
                dtype='float32',
                callback=audio_callback,
                blocksize=4000
            ):
                start_time = time.time()

                while not stop_event.is_set():
                    while recognizer.is_ready(stream):
                        recognizer.decode_stream(stream)

                    if recognizer.is_endpoint(stream):
                        result = recognizer.get_result(stream).strip()
                        if result:
                            print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {result}")
                            sync_queue.put(result)  # ‚Üê –ö–ª–∞–¥—ë–º –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å!
                        recognizer.reset(stream)

                    time.sleep(0.01)

                    if time.time() - start_time > timeout:
                        print("‚è∞ –¢–∞–π–º–∞—É—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
                        sync_queue.put("")  # ‚Üê –°–∏–≥–Ω–∞–ª —Ç–∞–π–º–∞—É—Ç–∞
                        break

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ recognition_worker: {e}")
            sync_queue.put("")  # ‚Üê –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∫–ª–∞–¥—ë–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        finally:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –Ω–µ –∑–∞–≤–∏—Å–Ω–µ—Ç
            sync_queue.put(None)  # ‚Üê –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_running_loop()
    worker_task = loop.run_in_executor(None, recognition_worker)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ–º –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    try:
        while True:
            # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ ‚Äî –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
            result = await asyncio.to_thread(sync_queue.get)  # ‚Üê –≠—Ç–æ –ù–ï –∫–æ—Ä—É—Ç–∏–Ω–∞, –∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π get()

            if result is None:
                # –ü–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                break
            elif result == "":
                # –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
                print("üîá –ü—É—Å—Ç–æ–π –≤–≤–æ–¥")
                return ""
            else:
                # –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
                stop_event.set()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º worker
                await worker_task  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
        stop_event.set()
        await worker_task
        return ""

    # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return ""